#!/usr/bin/python
# --*-- coding:utf-8 --*--
#python arr.py



A = [[-70.5568103090909, 39.0], [-69.44318968931819, 39.0], [-50.55681031068182, 39.0], [-49.44318968931818, 39.0], [-30.55681031068182, 39.0], [-29.443189689318185, 39.0], [-10.556810310681815, 39.0], [-9.414589751592533, 39.0], [-70.8977194, 37.5], [-69.10228059649738, 37.5], [-50.89771940350262, 37.5], [-49.10228059649738, 37.5], [-30.89771940350262, 37.5], [-29.102280596497376, 37.5], [-10.897719403502622, 37.5], [-9.039589753475957, 37.5], [-71.2386284909091, 36.0], [-68.76137150367657, 36.0], [-51.23862849632343, 36.0], [-48.76137150367657, 36.0], [-31.23862849632343, 36.0], [-28.76137150367657, 36.0], [-11.238628496323427, 36.0], [-8.66458975535938, 36.0], [-71.57953758181817, 34.5], [-68.42046241085578, 34.5], [-51.57953758914424, 34.5], [-48.42046241085576, 34.5], [-31.579537589144234, 34.5], [-28.420462410855766, 34.5], [-11.579537589144232, 34.5], [-8.289589757242801, 34.5], [-71.92044667272727, 33.0], [-68.07955331803497, 33.0], [-51.92044668196504, 33.0], [-48.07955331803496, 33.0], [-31.92044668196504, 33.0], [-28.07955331803496, 33.0], [-11.920446681965037, 33.0], [-7.914589759126224, 33.0], [-72.26135576363636, 31.5], [-67.73864422521416, 31.5], [-52.26135577478585, 31.5], [-47.73864422521415, 31.5], [-32.26135577478585, 31.5], [-27.738644225214156, 31.5], [-12.261355774785844, 31.5], [-7.539589761009648, 31.5], [-72.60226485454545, 30.0], [-67.39773513239335, 30.0], [-52.60226486760665, 30.0], [-47.39773513239335, 30.0], [-32.60226486760665, 30.0], [-27.397735132393347, 30.0], [-12.60226486760665, 30.0], [-7.164589762893071, 30.0], [-72.94317394545455, 28.5], [-67.05682603957254, 28.5], [-52.94317396042746, 28.5], [-47.05682603957254, 28.5], [-32.94317396042746, 28.5], [-27.05682603957254, 28.5], [-12.943173960427455, 28.5], [-6.789589764776494, 28.5], [-73.28408303636363, 27.0], [-66.71591694675175, 27.0], [-53.28408305324826, 27.0], [-46.71591694675174, 27.0], [-33.28408305324826, 27.0], [-26.715916946751737, 27.0], [-13.284083053248262, 27.0], [-6.414589766659917, 27.0], [-73.62499212727272, 25.5], [-66.37500785393094, 25.5], [-53.62499214606907, 25.5], [-46.37500785393093, 25.5], [-33.62499214606907, 25.5], [-26.37500785393093, 25.5], [-13.624992146069069, 25.5], [-6.0395897685433395, 25.5], [-73.96590121818181, 24.0], [-66.03409876111013, 24.0], [-53.96590123888988, 24.0], [-46.03409876111012, 24.0], [-33.96590123888988, 24.0], [-26.034098761110126, 24.0], [-13.965901238889874, 24.0], [-5.664589770426762, 24.0], [-74.3068103090909, 22.5], [-65.69318966828932, 22.5], [-54.30681033171068, 22.5], [-45.69318966828932, 22.5], [-34.30681033171068, 22.5], [-25.69318966828932, 22.5], [-14.306810331710679, 22.5], [-5.289589772310185, 22.5], [-74.6477194, 21.0], [-65.35228057546851, 21.0], [-54.64771942453149, 21.0], [-45.35228057546851, 21.0], [-34.64771942453149, 21.0], [-25.352280575468512, 21.0], [-14.647719424531486, 21.0], [-4.914589774193607, 21.0], [-74.98862849090908, 19.5], [-65.01137148264772, 19.5], [-54.98862851735229, 19.5], [-45.01137148264771, 19.5], [-34.98862851735229, 19.5], [-25.011371482647707, 19.5], [-14.988628517352291, 19.5], [-4.5395897760770305, 19.5], [-75.32953758181817, 18.0], [-64.67046238982691, 18.0], [-55.3295376101731, 18.0], [-44.6704623898269, 18.0], [-35.3295376101731, 18.0], [-24.670462389826902, 18.0], [-15.329537610173098, 18.0], [-4.164589777960454, 18.0], [-75.67044667272727, 16.5], [-64.3295532970061, 16.5], [-55.67044670299391, 16.5], [-44.32955329700609, 16.5], [-35.67044670299391, 16.5], [-24.329553297006097, 16.5], [-15.670446702993903, 16.5], [-3.789589779843877, 16.5], [-76.01135576363636, 15.0], [-63.98864420418529, 15.0], [-56.01135579581471, 15.0], [-43.98864420418529, 15.0], [-36.01135579581471, 15.0], [-23.98864420418529, 15.0], [-16.01135579581471, 15.0], [-3.414589781727299, 15.0], [-76.35226485454545, 13.5], [-63.64773511136449, 13.5], [-56.35226488863552, 13.5], [-43.64773511136448, 13.5], [-36.35226488863552, 13.5], [-23.647735111364483, 13.5], [-16.352264888635514, 13.5], [-3.0395897836107224, 13.5], [-76.69317394545455, 12.0], [-63.30682601854368, 12.0], [-56.69317398145632, 12.0], [-43.30682601854368, 12.0], [-36.69317398145632, 12.0], [-23.306826018543678, 12.0], [-16.693173981456322, 12.0], [-2.6645897854941447, 12.0], [-77.03408303636363, 10.5], [-62.96591692572287, 10.5], [-57.03408307427713, 10.5], [-42.96591692572287, 10.5], [-37.03408307427713, 10.5], [-22.965916925722873, 10.5], [-17.034083074277127, 10.5], [-2.289589787377568, 10.5], [-77.37499212727272, 9.0], [-62.62500783290207, 9.0], [-57.374992167097936, 9.0], [-42.62500783290207, 9.0], [-37.374992167097936, 9.0], [-22.625007832902067, 9.0], [-17.374992167097933, 9.0], [-1.9145897892609902, 9.0], [-77.71590121818181, 7.5], [-62.28409874008126, 7.5], [-57.71590125991874, 7.5], [-42.28409874008126, 7.5], [-37.71590125991874, 7.5], [-22.284098740081262, 7.5], [-17.715901259918738, 7.5], [-1.5395897911444134, 7.5], [-78.0568103090909, 6.0], [-61.94318964726045, 6.0], [-58.05681035273955, 6.0], [-41.94318964726045, 6.0], [-38.05681035273955, 6.0], [-21.943189647260454, 6.0], [-18.056810352739546, 6.0], [-1.1645897930278366, 6.0], [-78.3977194, 4.5], [-61.60228055443965, 4.5], [-58.39771944556035, 4.5], [-41.60228055443965, 4.5], [-38.39771944556035, 4.5], [-21.602280554439652, 4.5], [-18.39771944556035, 4.5], [-0.7895897949112598, 4.5], [-78.73862849090908, 3.0], [-61.26137146161884, 3.0], [-58.73862853838116, 3.0], [-41.26137146161884, 3.0], [-38.73862853838116, 3.0], [-21.261371461618843, 3.0], [-18.738628538381157, 3.0], [-0.414589796794683, 3.0], [-79.07953758181817, 1.5], [-60.92046236879804, 1.5], [-59.079537631201966, 1.5], [-40.92046236879804, 1.5], [-39.079537631201966, 1.5], [-20.920462368798038, 1.5], [-19.079537631201962, 1.5], [-0.03958979867810619, 1.5], [-79.42044667272727, 0.0], [-60.57955327597723, 0.0], [-59.42044672402277, 0.0], [-40.57955327597723, 0.0], [-39.42044672402277, 0.0], [-20.579553275977233, 0.0], [-19.420446724022767, 0.0]]

#считаем - сколько раз прямая пересекла контур(max_R)
repeat=[]
r=1
for a in range(len(A)):
        if A[a][1]==A[a-1][1]:
            r+=1
            repeat.append(r)
        else:
            r=1           
max_R= max(repeat)
print 'max_R=', max_R
print '\n'
# max_R  - количество требуемых массивов
M=[]
for a in range(max_R*2): M.append([])
   

print 'M=', M
print '\n'
def sort(Arr, arr,n):
    for a in range(len(Arr)):
        try:
            if Arr[a][1]!=Arr[a-1][1]:
                arr[n].append(Arr[a])
            else:
                arr[n+max_R].append(Arr[a])                
        except:
            print 'except\n'                                    

def sort2( arr_sort,arr,n):
    for a in range(len(arr_sort)):
        try:
            if arr_sort[a][1]!=arr_sort[a-1][1]:
                arr[n].append(arr_sort[a])
            else:
                arr[n+max_R].append(arr_sort[a])                
        except:
            pass
                            
sort(A, M,0)


for a in range(max_R-1) : 
    sort2(M[a+max_R], M,a+1)
    pass
   
        
                                          
print 'M0=', M[0]
print '\n'
print 'M1=', M[1] 
print '\n'
print 'M2=', M[2]                
print '\n'
print 'M3=', M[3]              
print '\n'
print 'M4=', M[4]                
print '\n'
print 'M5=', M[5]
print '\n'                
print 'M6=', M[6]
print '\n'
print 'M7=', M[7] 
print '\n'
              
                                
                
                
                
